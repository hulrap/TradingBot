"use strict";exports.id=619,exports.ids=[619],exports.modules={6660:(e,t,i)=>{i.d(t,{O:()=>o});var n=i(6897);let a=process.env.NEXT_PUBLIC_SUPABASE_URL||"https://placeholder.supabase.co",r=process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY||"placeholder-key",o=(0,n.eI)(a,r)},9489:(e,t,i)=>{i.d(t,{SN:()=>r,UC:()=>a});var n=i(1376);n.z.object({id:n.z.string().uuid(),email:n.z.string().email(),emailVerified:n.z.boolean(),twoFactorEnabled:n.z.boolean(),isActive:n.z.boolean(),createdAt:n.z.date(),updatedAt:n.z.date(),lastLogin:n.z.date().optional()}),n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),firstName:n.z.string().optional(),lastName:n.z.string().optional(),phone:n.z.string().optional(),timezone:n.z.string().default("UTC"),notificationPreferences:n.z.object({email:n.z.boolean().default(!0),sms:n.z.boolean().default(!1),discord:n.z.boolean().default(!1)}),riskTolerance:n.z.enum(["low","medium","high"]).default("medium")}),n.z.object({sub:n.z.string().uuid(),email:n.z.string().email(),iat:n.z.number(),exp:n.z.number(),jti:n.z.string().optional()});var a=n.z.object({email:n.z.string().email(),password:n.z.string().min(8),twoFactorCode:n.z.string().optional()}),r=n.z.object({email:n.z.string().email(),password:n.z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/),firstName:n.z.string().optional(),lastName:n.z.string().optional()});n.z.object({success:n.z.boolean(),user:n.z.any().optional(),accessToken:n.z.string().optional(),refreshToken:n.z.string().optional(),expiresIn:n.z.number().optional(),error:n.z.string().optional(),message:n.z.string().optional(),timestamp:n.z.date().default(()=>new Date)}),n.z.object({id:n.z.string(),userId:n.z.string().uuid(),accessToken:n.z.string(),refreshToken:n.z.string(),expiresAt:n.z.date(),createdAt:n.z.date(),ipAddress:n.z.string().optional(),userAgent:n.z.string().optional()});var o=n.z.enum(["ethereum","bsc","solana","polygon","arbitrum","optimism"]);n.z.object({id:n.z.number(),name:o,displayName:n.z.string(),rpcUrl:n.z.string().url(),wsUrl:n.z.string().url().optional(),blockExplorer:n.z.string().url(),nativeCurrency:n.z.object({name:n.z.string(),symbol:n.z.string(),decimals:n.z.number()}),isTestnet:n.z.boolean().default(!1)}),n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),name:n.z.string(),address:n.z.string(),chain:o,encryptedPrivateKey:n.z.string(),walletType:n.z.enum(["imported","generated"]).default("imported"),isActive:n.z.boolean().default(!0),createdAt:n.z.date(),updatedAt:n.z.date()}),n.z.object({address:n.z.string(),symbol:n.z.string(),name:n.z.string(),decimals:n.z.number(),chain:o,logoUri:n.z.string().url().optional(),coingeckoId:n.z.string().optional(),isVerified:n.z.boolean().default(!1)}),n.z.object({hash:n.z.string(),from:n.z.string(),to:n.z.string(),value:n.z.string(),gasLimit:n.z.string(),gasPrice:n.z.string().optional(),maxFeePerGas:n.z.string().optional(),maxPriorityFeePerGas:n.z.string().optional(),nonce:n.z.number(),data:n.z.string().optional(),blockNumber:n.z.number().optional(),blockHash:n.z.string().optional(),transactionIndex:n.z.number().optional(),confirmations:n.z.number().optional(),status:n.z.enum(["pending","confirmed","failed"]).optional()}),n.z.object({gasLimit:n.z.string(),gasPrice:n.z.string().optional(),maxFeePerGas:n.z.string().optional(),maxPriorityFeePerGas:n.z.string().optional(),estimatedCost:n.z.string(),estimatedCostUSD:n.z.number().optional()}),n.z.object({number:n.z.number(),hash:n.z.string(),parentHash:n.z.string(),timestamp:n.z.number(),gasLimit:n.z.string(),gasUsed:n.z.string(),baseFeePerGas:n.z.string().optional(),transactions:n.z.array(n.z.string()),miner:n.z.string().optional(),difficulty:n.z.string().optional()});var s=n.z.enum(["uniswap_v2","uniswap_v3","sushiswap","pancakeswap","jupiter","raydium","orca","serum","1inch","paraswap","kyber","balancer"]);n.z.object({name:s,chain:o,factoryAddress:n.z.string().optional(),routerAddress:n.z.string().optional(),quoterAddress:n.z.string().optional(),fee:n.z.number(),isActive:n.z.boolean().default(!0)});var z=n.z.enum(["arbitrage","copy_trader","sandwich","liquidation","jit_liquidity","market_maker"]),l=n.z.enum(["idle","running","paused","error","stopped"]),d=n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),walletId:n.z.string().uuid(),botType:z,name:n.z.string(),isActive:n.z.boolean().default(!1),isPaperTrading:n.z.boolean().default(!0),maxDailyTrades:n.z.number().default(100),maxPositionSize:n.z.string().optional(),stopLossPercentage:n.z.number().optional(),takeProfitPercentage:n.z.number().optional(),createdAt:n.z.date(),updatedAt:n.z.date()}),u=d.extend({botType:n.z.literal("arbitrage"),configuration:n.z.object({tokenPairs:n.z.array(n.z.object({tokenA:n.z.string(),tokenB:n.z.string(),chains:n.z.array(o)})),minProfitThreshold:n.z.number().min(0).max(100),maxSlippage:n.z.number().min(0).max(10),dexes:n.z.array(n.z.string()),gasMultiplier:n.z.number().min(1).max(3).default(1.2),enableMEVProtection:n.z.boolean().default(!0)})}),m=d.extend({botType:n.z.literal("copy_trader"),configuration:n.z.object({targetAddresses:n.z.array(n.z.object({address:n.z.string(),chain:o,copyPercentage:n.z.number().min(1).max(100).default(100),maxCopyAmount:n.z.string().optional()})),copySettings:n.z.object({copyType:n.z.enum(["fixed_amount","percentage"]).default("percentage"),fixedAmount:n.z.string().optional(),percentage:n.z.number().min(1).max(100).default(10)}),filters:n.z.object({minTradeSize:n.z.string().optional(),maxTradeSize:n.z.string().optional(),excludeTokens:n.z.array(n.z.string()).default([]),onlyVerifiedTokens:n.z.boolean().default(!0)}),latencyOptimization:n.z.boolean().default(!0)})}),g=d.extend({botType:n.z.literal("sandwich"),configuration:n.z.object({targetDEXes:n.z.array(n.z.string()),minVictimTradeSize:n.z.string(),maxGasBid:n.z.string(),profitThreshold:n.z.number().min(0).max(100),mevRelays:n.z.array(n.z.string()),competitionAnalysis:n.z.boolean().default(!0),bundleSettings:n.z.object({maxBundleSize:n.z.number().default(3),gasMultiplier:n.z.number().min(1).max(5).default(2)})})});n.z.discriminatedUnion("botType",[u,m,g]),n.z.object({botId:n.z.string(),status:l,lastActivity:n.z.date(),errorCount:n.z.number().default(0),lastError:n.z.string().optional(),performanceMetrics:n.z.object({totalTrades:n.z.number().default(0),successfulTrades:n.z.number().default(0),totalProfit:n.z.string().default("0"),totalLoss:n.z.string().default("0"),winRate:n.z.number().default(0),avgExecutionTime:n.z.number().default(0)}),createdAt:n.z.date(),updatedAt:n.z.date()}),n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),botConfigId:n.z.string().uuid(),date:n.z.date(),totalTrades:n.z.number().default(0),successfulTrades:n.z.number().default(0),totalVolume:n.z.string().default("0"),totalProfitLoss:n.z.string().default("0"),totalProfitLossUSD:n.z.number().default(0),maxDrawdown:n.z.number().default(0),sharpeRatio:n.z.number().optional(),winRate:n.z.number().default(0),averageTradeSize:n.z.string().default("0"),createdAt:n.z.date()});var p=n.z.enum(["trade_executed","profit_target","stop_loss","error","system"]),c=n.z.enum(["info","warning","error","critical"]);n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),botConfigId:n.z.string().uuid().optional(),alertType:p,title:n.z.string(),message:n.z.string(),severity:c.default("info"),isRead:n.z.boolean().default(!1),metadata:n.z.record(n.z.any()).optional(),createdAt:n.z.date()}),n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),serviceName:n.z.string(),encryptedApiKey:n.z.string(),encryptedSecretKey:n.z.string().optional(),isActive:n.z.boolean().default(!0),createdAt:n.z.date(),updatedAt:n.z.date()}),n.z.object({host:n.z.string(),port:n.z.number(),database:n.z.string(),username:n.z.string(),password:n.z.string(),ssl:n.z.boolean().default(!0),maxConnections:n.z.number().default(10)}),n.z.object({success:n.z.boolean(),data:n.z.any().optional(),error:n.z.string().optional(),message:n.z.string().optional(),timestamp:n.z.date().default(()=>new Date)}),n.z.object({page:n.z.number().min(1).default(1),limit:n.z.number().min(1).max(100).default(20),total:n.z.number().optional(),totalPages:n.z.number().optional()}),n.z.enum(["GET","POST","PUT","DELETE","PATCH"]),n.z.object({Authorization:n.z.string().optional(),"Content-Type":n.z.string().optional(),"X-API-Key":n.z.string().optional(),"User-Agent":n.z.string().optional()}),n.z.object({limit:n.z.number(),remaining:n.z.number(),reset:n.z.number(),retryAfter:n.z.number().optional()});var b=n.z.enum(["buy","sell","swap","arbitrage","sandwich","liquidation"]);n.z.enum(["pending","confirmed","failed","cancelled"]),n.z.object({id:n.z.string().uuid(),userId:n.z.string().uuid(),botConfigId:n.z.string().uuid().optional(),walletId:n.z.string().uuid(),transactionHash:n.z.string().optional(),chain:o,tradeType:b,tokenIn:n.z.string(),tokenOut:n.z.string(),amountIn:n.z.string(),amountOut:n.z.string(),gasUsed:n.z.string().optional(),gasPrice:n.z.string().optional(),profitLoss:n.z.string().optional(),profitLossUSD:n.z.number().optional(),slippage:n.z.number().optional(),dex:s.optional(),isPaperTrade:n.z.boolean().default(!1),executedAt:n.z.date(),createdAt:n.z.date()}),n.z.object({tokenIn:n.z.string(),tokenOut:n.z.string(),amountIn:n.z.string(),amountOut:n.z.string(),price:n.z.number(),priceImpact:n.z.number(),gasEstimate:n.z.string(),route:n.z.array(n.z.object({dex:s,percentage:n.z.number()})),validUntil:n.z.date()}),n.z.object({id:n.z.string(),tokenPair:n.z.string(),dexA:s,dexB:s,priceA:n.z.number(),priceB:n.z.number(),profitPotential:n.z.number(),profitAfterGas:n.z.number(),gasEstimate:n.z.string(),discoveredAt:n.z.date(),expiresAt:n.z.date()}),n.z.object({tokenA:n.z.string(),tokenB:n.z.string(),chain:o,dex:s,liquidity:n.z.string(),volume24h:n.z.string(),fee:n.z.number(),isActive:n.z.boolean().default(!0)}),n.z.object({symbol:n.z.string(),price:n.z.number(),priceChange24h:n.z.number(),volume24h:n.z.string(),marketCap:n.z.string().optional(),liquidity:n.z.string().optional(),timestamp:n.z.date()});var f=n.z.object({price:n.z.number(),amount:n.z.string(),total:n.z.string()});n.z.object({symbol:n.z.string(),bids:n.z.array(f),asks:n.z.array(f),timestamp:n.z.date()}),n.z.object({maxPositionSize:n.z.string(),maxDailyLoss:n.z.string(),stopLossPercentage:n.z.number().min(0).max(100),takeProfitPercentage:n.z.number().min(0).max(1e3),maxSlippage:n.z.number().min(0).max(50),maxGasPrice:n.z.string(),volatilityThreshold:n.z.number().min(0).max(100)});var y=n.z.enum(["stop_loss","position_limit","daily_limit","volatility_halt","gas_spike","slippage_exceeded","correlation_breach"]),x=n.z.enum(["low","medium","high","critical"]);n.z.object({id:n.z.string().uuid(),botId:n.z.string(),eventType:y,severity:x,description:n.z.string(),actionTaken:n.z.string().optional(),positionSizeBefore:n.z.string().optional(),positionSizeAfter:n.z.string().optional(),triggerValue:n.z.number(),thresholdValue:n.z.number(),createdAt:n.z.date()});var A=n.z.enum(["sandwich","arbitrage","liquidation","jit_liquidity"]),j=n.z.object({to:n.z.string(),data:n.z.string(),value:n.z.string().default("0"),gasLimit:n.z.string(),gasPrice:n.z.string().optional(),maxFeePerGas:n.z.string().optional(),maxPriorityFeePerGas:n.z.string().optional()});n.z.object({id:n.z.string(),transactions:n.z.array(j),blockNumber:n.z.number(),minTimestamp:n.z.number().optional(),maxTimestamp:n.z.number().optional(),revertingTxHashes:n.z.array(n.z.string()).optional()}),n.z.object({txs:n.z.array(n.z.string()),blockNumber:n.z.string(),minTimestamp:n.z.number().optional(),maxTimestamp:n.z.number().optional(),revertingTxHashes:n.z.array(n.z.string()).optional()}),n.z.object({id:n.z.string(),botId:n.z.string(),opportunityType:A,targetTransaction:n.z.string().optional(),bundleTransactions:n.z.array(j),estimatedProfit:n.z.string(),gasBid:n.z.string(),competitionLevel:n.z.number().min(1).max(10).default(1),isSubmitted:n.z.boolean().default(!1),isSuccessful:n.z.boolean().default(!1),actualProfit:n.z.string().optional(),discoveredAt:n.z.date(),submittedAt:n.z.date().optional(),confirmedAt:n.z.date().optional()});var h=n.z.enum(["reinforcement_learning","ensemble","neural_network","genetic_algorithm","sentiment_analysis","pattern_recognition"]);n.z.object({modelType:h,parameters:n.z.record(n.z.any()),trainingData:n.z.object({features:n.z.array(n.z.string()),targetVariable:n.z.string(),timeframe:n.z.string()}),performance:n.z.object({accuracy:n.z.number().optional(),precision:n.z.number().optional(),recall:n.z.number().optional(),f1Score:n.z.number().optional(),sharpeRatio:n.z.number().optional()}).optional()});var T=n.z.object({name:n.z.string(),type:n.z.enum(["technical","fundamental","sentiment","on_chain"]),timeframe:n.z.string(),value:n.z.number(),timestamp:n.z.date()});n.z.object({symbol:n.z.string(),prediction:n.z.number(),confidence:n.z.number().min(0).max(1),timeframe:n.z.string(),features:n.z.array(T),modelId:n.z.string(),createdAt:n.z.date(),expiresAt:n.z.date()});var v=n.z.enum(["trade_executed","bot_status","price_update","alert","error","connection_status","heartbeat"]);n.z.object({type:v,data:n.z.any(),timestamp:n.z.date(),id:n.z.string().optional()});var P=n.z.enum(["connecting","connected","disconnected","error","reconnecting"]);n.z.object({id:n.z.string(),botId:n.z.string(),connectionType:n.z.enum(["rpc","dex_data","mempool","price_feed"]),endpoint:n.z.string(),status:P,lastMessageAt:n.z.date().optional(),reconnectCount:n.z.number().default(0),errorCount:n.z.number().default(0),lastError:n.z.string().optional(),createdAt:n.z.date(),updatedAt:n.z.date()})}};
"use strict";(()=>{var e={};e.id=176,e.ids=[176],e.modules={5890:e=>{e.exports=require("better-sqlite3")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},2361:e=>{e.exports=require("events")},7147:e=>{e.exports=require("fs")},3685:e=>{e.exports=require("http")},5687:e=>{e.exports=require("https")},1808:e=>{e.exports=require("net")},9563:e=>{e.exports=require("os")},1017:e=>{e.exports=require("path")},5477:e=>{e.exports=require("punycode")},2781:e=>{e.exports=require("stream")},4404:e=>{e.exports=require("tls")},7310:e=>{e.exports=require("url")},9796:e=>{e.exports=require("zlib")},9122:(e,t,r)=>{r.r(t),r.d(t,{headerHooks:()=>T,originalPathname:()=>Z,patchFetch:()=>E,requestAsyncStorage:()=>v,routeModule:()=>x,serverHooks:()=>I,staticGenerationAsyncStorage:()=>j,staticGenerationBailout:()=>q});var a={};r.r(a),r.d(a,{DELETE:()=>z,GET:()=>w,POST:()=>_,PUT:()=>y});var i=r(5649),o=r(8584),s=r(5144),n=r(7180),u=r(1304),l=r(1376),d=r(5113),c=r(2812),m=r(4538);function p(){let e=process.env.SUPABASE_URL,t=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!e||!t)throw Error("Supabase configuration is missing. Please set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY environment variables.");return(0,u.eI)(e,t)}let f=l.z.object({name:l.z.string().min(1,"Bot name is required"),walletId:l.z.string().uuid("Invalid wallet ID"),chain:l.z.enum(["ethereum","bsc","polygon","arbitrum"],{invalid_type_error:"Invalid chain"}),tokenPair:l.z.object({tokenA:l.z.string().min(1,"Token A is required"),tokenB:l.z.string().min(1,"Token B is required")}),minProfitThreshold:l.z.number().min(.01,"Minimum profit threshold must be at least 0.01%"),tradeSize:l.z.number().min(.001,"Trade size must be at least 0.001"),maxSlippage:l.z.number().min(.1).max(5,"Max slippage must be between 0.1% and 5%").optional(),maxGasPrice:l.z.number().min(1,"Max gas price must be at least 1 gwei").optional(),isPaperTrading:l.z.boolean().optional().default(!0)}),g=l.z.object({name:l.z.string().min(1,"Bot name is required"),walletId:l.z.string().uuid("Invalid wallet ID"),chain:l.z.enum(["ethereum","bsc","polygon","arbitrum"],{invalid_type_error:"Invalid chain"}),targetWalletAddress:l.z.string().regex(/^0x[a-fA-F0-9]{40}$/,"Invalid wallet address"),tradeSize:l.z.object({type:l.z.enum(["FIXED","PERCENTAGE"]),value:l.z.number().min(.001,"Trade size must be at least 0.001")}),maxTradeSize:l.z.number().min(.01,"Max trade size must be at least 0.01").optional(),minTradeSize:l.z.number().min(.001,"Min trade size must be at least 0.001").optional(),copyDelay:l.z.number().min(0).max(60,"Copy delay must be between 0-60 seconds").optional(),isPaperTrading:l.z.boolean().optional().default(!0)}),b=l.z.object({name:l.z.string().min(1,"Bot name is required"),walletId:l.z.string().uuid("Invalid wallet ID"),chain:l.z.enum(["ethereum","bsc","polygon","arbitrum"],{invalid_type_error:"Invalid chain"}),targetDex:l.z.enum(["uniswap","sushiswap","pancakeswap"],{invalid_type_error:"Invalid DEX"}),minVictimTradeSize:l.z.number().min(.1,"Minimum victim trade size must be at least 0.1 ETH"),maxGasPrice:l.z.number().min(1,"Max gas price must be at least 1 gwei"),maxSlippage:l.z.number().min(.1).max(5,"Max slippage must be between 0.1% and 5%").optional(),isPaperTrading:l.z.boolean().optional().default(!0)}),h=l.z.object({botId:l.z.string().uuid("Invalid bot ID"),isActive:l.z.boolean().optional(),isPaperTrading:l.z.boolean().optional(),configuration:l.z.record(l.z.any()).optional()});async function w(e){try{let t=await c.qQ.check(e);if(!t.success)return n.Z.json({error:"Rate limit exceeded",retryAfter:Math.ceil((t.resetTime-Date.now())/1e3)},{status:429});let r=await (0,d.PZ)(e);if(!r.success)return n.Z.json({error:"Unauthorized",details:r.error},{status:401});let a=r.payload?.sub;if(!a)return n.Z.json({error:"Invalid token payload"},{status:401});let i=p(),{data:o,error:s}=await i.from("bot_configurations").select(`
        id,
        user_id,
        name,
        type,
        status,
        is_active,
        is_paper_trading,
        max_daily_trades,
        max_position_size,
        stop_loss_percentage,
        take_profit_percentage,
        configuration,
        created_at,
        updated_at
      `).eq("user_id",a).order("created_at",{ascending:!1});if(s)return console.error("Error fetching bot configurations:",s),n.Z.json({error:"Failed to fetch bot configurations"},{status:500});return n.Z.json({success:!0,data:o||[]})}catch(e){return console.error("Error in GET bot configurations:",e),n.Z.json({error:"Failed to fetch bot configurations"},{status:500})}}async function _(e){try{let t;let r=await c.qQ.check(e,10,36e5);if(!r.success)return n.Z.json({error:"Rate limit exceeded",retryAfter:Math.ceil((r.resetTime-Date.now())/1e3)},{status:429});let a=await (0,d.PZ)(e);if(!a.success)return n.Z.json({error:"Unauthorized",details:a.error},{status:401});let i=a.payload?.sub;if(!i)return n.Z.json({error:"Invalid token payload"},{status:401});let{botType:o,...s}=await e.json();if(!o||!["arbitrage","copy-trader","mev-sandwich"].includes(o))return n.Z.json({error:"Invalid or missing bot type"},{status:400});switch(o){case"arbitrage":t=f.safeParse(s);break;case"copy-trader":t=g.safeParse(s);break;case"mev-sandwich":t=b.safeParse(s);break;default:return n.Z.json({error:"Invalid bot type"},{status:400})}if(!t.success)return n.Z.json({error:"Invalid configuration data",details:t.error.errors},{status:400});let u=t.data,l=p(),{data:h,error:w}=await l.from("wallets").select("id, chain").eq("id",u.walletId).eq("user_id",i).single();if(w||!h)return n.Z.json({error:"Invalid wallet or wallet does not belong to user"},{status:400});let _=u.chain.toLowerCase(),y=h.chain.toLowerCase();if(!("ethereum"===_&&"eth"===y||"bsc"===_&&"bsc"===y||_===y))return n.Z.json({error:"Wallet chain is not compatible with bot configuration"},{status:400});let z=`bot_${Date.now()}_${(0,m.R1)(8)}`,{data:x,error:v}=await l.from("bot_configurations").insert({id:z,user_id:i,name:u.name,type:o,status:"stopped",is_active:!1,is_paper_trading:u.isPaperTrading||!0,max_daily_trades:100,configuration:u,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}).select().single();if(v)return console.error("Error creating bot configuration:",v),n.Z.json({error:"Failed to create bot configuration"},{status:500});return console.log(`Bot configuration created for user ${i}: ${o} - ${u.name}`),n.Z.json({success:!0,data:x})}catch(e){return console.error("Error creating bot configuration:",e),n.Z.json({error:"Failed to create bot configuration"},{status:500})}}async function y(e){try{let t=await c.qQ.check(e);if(!t.success)return n.Z.json({error:"Rate limit exceeded",retryAfter:Math.ceil((t.resetTime-Date.now())/1e3)},{status:429});let r=await (0,d.PZ)(e);if(!r.success)return n.Z.json({error:"Unauthorized",details:r.error},{status:401});let a=r.payload?.sub;if(!a)return n.Z.json({error:"Invalid token payload"},{status:401});let i=await e.json(),o=h.safeParse(i);if(!o.success)return n.Z.json({error:"Invalid update data",details:o.error.errors},{status:400});let{botId:s,isActive:u,isPaperTrading:l,configuration:m}=o.data,f={updated_at:new Date().toISOString()};"boolean"==typeof u&&(f.is_active=u,f.status=u?"running":"stopped"),"boolean"==typeof l&&(f.is_paper_trading=l),m&&(f.configuration=m);let g=p(),{data:b,error:w}=await g.from("bot_configurations").update(f).eq("id",s).eq("user_id",a).select().single();if(w){if(console.error("Error updating bot configuration:",w),"PGRST116"===w.code)return n.Z.json({error:"Bot configuration not found or access denied"},{status:404});return n.Z.json({error:"Failed to update bot configuration"},{status:500})}return console.log(`Bot configuration updated by user ${a}: ${s}`),n.Z.json({success:!0,data:b})}catch(e){return console.error("Error updating bot configuration:",e),n.Z.json({error:"Failed to update bot configuration"},{status:500})}}async function z(e){try{let t=await c.qQ.check(e);if(!t.success)return n.Z.json({error:"Rate limit exceeded",retryAfter:Math.ceil((t.resetTime-Date.now())/1e3)},{status:429});let r=await (0,d.PZ)(e);if(!r.success)return n.Z.json({error:"Unauthorized",details:r.error},{status:401});let a=r.payload?.sub;if(!a)return n.Z.json({error:"Invalid token payload"},{status:401});let{searchParams:i}=new URL(e.url),o=i.get("botId");if(!o)return n.Z.json({error:"Bot ID is required"},{status:400});let s=p();await s.from("bot_configurations").update({is_active:!1,status:"stopped",updated_at:new Date().toISOString()}).eq("id",o).eq("user_id",a);let{error:u}=await s.from("bot_configurations").delete().eq("id",o).eq("user_id",a);if(u)return console.error("Error deleting bot configuration:",u),n.Z.json({error:"Failed to delete bot configuration"},{status:500});return console.log(`Bot configuration deleted by user ${a}: ${o}`),n.Z.json({success:!0,message:"Bot configuration deleted successfully"})}catch(e){return console.error("Error deleting bot configuration:",e),n.Z.json({error:"Failed to delete bot configuration"},{status:500})}}let x=new i.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/bots/route",pathname:"/api/bots",filename:"route",bundlePath:"app/api/bots/route"},resolvedPagePath:"C:\\Users\\User1\\Downloads\\TradingBot\\apps\\frontend\\src\\app\\api\\bots\\route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:v,staticGenerationAsyncStorage:j,serverHooks:I,headerHooks:T,staticGenerationBailout:q}=x,Z="/api/bots/route";function E(){return(0,s.patchFetch)({serverHooks:I,staticGenerationAsyncStorage:j})}},2812:(e,t,r)=>{r.d(t,{qQ:()=>i});class a{constructor(e=100,t=9e5){this.store={},this.defaultLimit=e,this.defaultWindow=t,setInterval(()=>{this.cleanup()},3e5)}async check(e,t=this.defaultLimit,r=this.defaultWindow){let a=this.getIdentifier(e),i=Date.now(),o=`${a}:${Math.floor(i/r)}`;this.store[o]||(this.store[o]={count:0,resetTime:i+r});let s=this.store[o];return s.count>=t?{success:!1,remaining:0,resetTime:s.resetTime,error:`Rate limit exceeded. Try again in ${Math.ceil((s.resetTime-i)/1e3)} seconds.`}:(s.count++,{success:!0,remaining:t-s.count,resetTime:s.resetTime})}getIdentifier(e){let t=e.headers.get("x-user-id");if(t)return`user:${t}`;let r=e.headers.get("x-forwarded-for"),a=e.headers.get("x-real-ip"),i=r?r.split(",")[0]?.trim():a||"unknown";return`ip:${i}`}cleanup(){let e=Date.now();Object.keys(this.store).forEach(t=>{let r=this.store[t];r&&r.resetTime<e&&delete this.store[t]})}async checkLimit(e,t="default"){let r="action"===t?10:this.defaultLimit,a=await this.check(e,r);return a.success?{allowed:!0}:{allowed:!1,retryAfter:Math.ceil((a.resetTime-Date.now())/1e3)}}getStatus(e){let t=this.getIdentifier(e),r=Date.now(),a=`${t}:${Math.floor(r/this.defaultWindow)}`,i=this.store[a];return i?{count:i.count,remaining:Math.max(0,this.defaultLimit-i.count),resetTime:i.resetTime}:{count:0,remaining:this.defaultLimit,resetTime:r+this.defaultWindow}}}let i=new a;function o(e=100,t=9e5){return async r=>{let a=await i.check(r,e,t);return{...a,headers:{"X-RateLimit-Limit":e.toString(),"X-RateLimit-Remaining":a.remaining.toString(),"X-RateLimit-Reset":Math.ceil(a.resetTime/1e3).toString()}}}}o(5,9e5),o(100,9e5),o(50,6e4)}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[807,457,113],()=>r(9122));module.exports=a})();
{
  /**
   * TypeScript Configuration for Trading Bot Types Package
   * 
   * Enterprise-grade TypeScript configuration for type definition libraries
   * with advanced compilation settings, comprehensive type safety, and
   * professional development optimization.
   * 
   * Features:
   * - Maximum type safety with strict compilation
   * - Advanced module resolution with path mapping
   * - Comprehensive declaration generation
   * - Professional debugging and development support
   * - Optimized build pipeline for type libraries
   * - Enterprise-grade error reporting
   * 
   * @version 2.0.0
   * @package @trading-bot/types
   * @license MIT
   */
  
  "compilerOptions": {
    /* ========================================
     * LANGUAGE AND ENVIRONMENT
     * ======================================== */
    
    /** Target ECMAScript version for optimal compatibility */
    "target": "ES2022",
    
    /** Library files to include in compilation */
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    
    /** Use define for class fields (modern standard) */
    "useDefineForClassFields": true,
    
    /* ========================================
     * MODULES
     * ======================================== */
    
    /** Module system for generated code */
    "module": "ESNext",
    
    /** Module resolution strategy (optimized for bundlers) */
    "moduleResolution": "Bundler",
    
    /** Allow importing .json files */
    "resolveJsonModule": true,
    
    /** Treat each file as a separate module */
    "isolatedModules": true,
    
    /** Enable ES module interoperability */
    "esModuleInterop": true,
    
    /** Allow synthetic default imports */
    "allowSyntheticDefaultImports": true,
    
    /** Force consistent casing in file names */
    "forceConsistentCasingInFileNames": true,
    
    /* ========================================
     * EMIT
     * ======================================== */
    
    /** Generate .d.ts declaration files */
    "declaration": true,
    
    /** Generate declaration map files for debugging */
    "declarationMap": true,
    
    /** Generate source map files */
    "sourceMap": true,
    
    /** Emit additional JavaScript to ease interoperability */
    "allowJs": false,
    
    /** Check JS files (disabled for type-only package) */
    "checkJs": false,
    
    /** Output directory for compiled files */
    "outDir": "./dist",
    
    /** Root directory of input files */
    "rootDir": ".",
    
    /** Emit files even with TypeScript compilation errors */
    "noEmitOnError": true,
    
    /** Do not emit files if any type checking errors are reported */
    "noEmit": false,
    
    /** Preserve const enums in generated code */
    "preserveConstEnums": true,
    
    /** Remove comments from generated code (keep for types) */
    "removeComments": false,
    
    /* ========================================
     * INTEROP CONSTRAINTS
     * ======================================== */
    
    /** Ensure proper ES module interop */
    "verbatimModuleSyntax": false,
    
    /** Allow importing files without extensions */
    "allowImportingTsExtensions": false,
    
    /* ========================================
     * TYPE CHECKING (MAXIMUM STRICTNESS)
     * ======================================== */
    
    /** Enable all strict type checking options */
    "strict": true,
    
    /** Enable error reporting for expressions and declarations with 'any' type */
    "noImplicitAny": true,
    
    /** Enable strict null checks */
    "strictNullChecks": true,
    
    /** Enable strict checking of function types */
    "strictFunctionTypes": true,
    
    /** Enable strict checking of property initialization */
    "strictPropertyInitialization": true,
    
    /** Enable strict 'bind', 'call', and 'apply' methods on functions */
    "strictBindCallApply": true,
    
    /** Report error when not all code paths return a value */
    "noImplicitReturns": true,
    
    /** Report errors for fallthrough cases in switch statements */
    "noFallthroughCasesInSwitch": true,
    
    /** Report errors on unused local variables */
    "noUnusedLocals": true,
    
    /** Report errors on unused parameters */
    "noUnusedParameters": true,
    
    /** Check for class properties that are declared but not set */
    "exactOptionalPropertyTypes": true,
    
    /** Report error when local variables aren't read */
    "noImplicitOverride": true,
    
    /** Ensure overriding members are marked with override modifier */
    "allowUnreachableCode": false,
    
    /** Disallow unreachable code */
    "allowUnusedLabels": false,
    
    /* ========================================
     * COMPLETENESS
     * ======================================== */
    
    /** Skip type checking of declaration files */
    "skipLibCheck": true,
    
    /** Skip default lib check for performance */
    "skipDefaultLibCheck": true,
    
    /* ========================================
     * PATH MAPPING AND RESOLUTION
     * ======================================== */
    
    /** Base URL for module resolution */
    "baseUrl": ".",
    
    /** Path mapping for clean imports */
    "paths": {
      "@/*": ["./src/*"],
      "@/types": ["./src/index.ts"],
      "@/bot": ["./src/bot.ts"],
      "@/schemas": ["./src/schemas/*"],
      "@/utils": ["./src/utils/*"]
    },
    
    /** Type roots for additional type definitions */
    "typeRoots": ["./node_modules/@types", "./types"],
    
    /** Additional type packages to include */
    "types": [],
    
    /* ========================================
     * ADVANCED FEATURES
     * ======================================== */
    
    /** Enable experimental decorators */
    "experimentalDecorators": false,
    
    /** Emit metadata for decorators */
    "emitDecoratorMetadata": false,
    
    /** Enable importing with dynamic expressions (built-in support) */
    
    /* ========================================
     * PERFORMANCE OPTIMIZATIONS
     * ======================================== */
    
    /** Generate incremental compilation information */
    "incremental": true,
    
    /** File to store incremental compilation info */
    "tsBuildInfoFile": "./dist/.tsbuildinfo",
    
    /** Enable composite project compilation */
    "composite": false,
    
    /** Assume changes only affect direct dependencies */
    "assumeChangesOnlyAffectDirectDependencies": true,
    
    /* ========================================
     * DEBUGGING AND DEVELOPMENT
     * ======================================== */
    
    /** Include source content in source maps */
    "inlineSourceMap": false,
    
    /** Include source map files alongside output */
    "inlineSources": false,
    
    /** Pretty print diagnostic messages */
    "pretty": true,
    
    /** Preserve source code locations for debugging */
    "preserveSymlinks": false,
    
    /* ========================================
     * DIAGNOSTICS AND REPORTING
     * ======================================== */
    
    /** Report unused @ts-expect-error directives (handled by linter) */
    
    /** List all emitted files */
    "listEmittedFiles": false,
    
    /** List all files part of compilation */
    "listFiles": false,
    
    /** Explain why files are part of compilation */
    "explainFiles": false,
    
    /** Generate CPU profiles during compilation */
    "generateCpuProfile": "profile.cpuprofile"
  },
  
  /* ========================================
   * FILE INCLUSION/EXCLUSION
   * ======================================== */
  
  /** Files to include in compilation */
  "include": [
    "*.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    "types/**/*.d.ts"
  ],
  
  /** Files to exclude from compilation */
  "exclude": [
    "node_modules",
    "dist",
    "build",
    "coverage",
    "**/*.test.ts",
    "**/*.spec.ts",
    "**/*.stories.ts",
    "**/__tests__/**",
    "**/__mocks__/**",
    ".next",
    ".turbo"
  ],
  
  /* ========================================
   * WATCH OPTIONS
   * ======================================== */
  
  "watchOptions": {
    /** Watch strategy for file changes */
    "watchFile": "useFsEvents",
    
    /** Watch strategy for directories */
    "watchDirectory": "useFsEvents",
    
    /** Fallback polling when file system events are not available */
    "fallbackPolling": "dynamicPriority",
    
    /** Synchronous file operations */
    "synchronousWatchDirectory": true,
    
    /** Files to exclude from watch */
    "excludeDirectories": [
      "**/node_modules",
      "**/dist",
      "**/build",
      "**/.git"
    ]
  },
  
  /* ========================================
   * PROJECT REFERENCES (for monorepo)
   * Note: References disabled - types package is self-contained
   * ======================================== */
  
  /* ========================================
   * TypeScript-specific settings
   * ======================================== */
  
  "ts-node": {
    "esm": true,
    "swc": true,
    "compilerOptions": {
      "module": "ESNext",
      "target": "ES2022"
    }
  }
} 